{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/ProfileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/navbar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoutes.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","getFollowings","predicate","getActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInital","console","log","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","loadActivity","runInAction","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","marginBottom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","marginBotton","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","heigth","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoutes","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.99d5f689.chunk.js","sourcesContent":["export interface Pagination{\r\n    currentPage:number;\r\n    itemsPerPage:number;\r\n    totalItems:number;\r\n    totalPages:number;\r\n}\r\n\r\nexport class PaginatedResult<T>\r\n{\r\n    data:T;\r\n    pagination:Pagination;\r\n\r\n    constructor(data:T,pagination:Pagination)\r\n    {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams{\r\n    pageNumber ;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2)\r\n    {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\n\r\nconst sleep = (delay: number) =>{\r\n    return new Promise((resolve)=>{\r\n        setTimeout(resolve,delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination){\r\n        response.data = new PaginatedResult(response.data,JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n\r\n    return response;\r\n}, \r\n(error: AxiosError) => {\r\n    const {data,status,config} = error.response!;\r\n    switch(status){\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } \r\n            else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            history.push('/');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests ={\r\n    get:<T>(url:string) => axios.get<T>(url).then(responseBody),\r\n    post:<T>(url:string, body:{}) => axios.post<T>(url,body).then(responseBody),\r\n    put:<T>(url:string, body:{}) => axios.put<T>(url,body).then(responseBody),\r\n    delete:<T>(url:string) => axios.delete<T>(url).then(responseBody),\r\n\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n    .then(responseBody),\r\n    details: (id:string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity:ActivityFormValues) => requests.post<void>('/activities',activity),\r\n    update: (activity:ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`,activity),\r\n    delete: (id:string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id:string) => requests.post<void>(`/activities/${id}/attend`,{})\r\n    \r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username:string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file:Blob) =>{\r\n        let formData = new FormData();\r\n        formData.append('File',file);\r\n        return axios.post<Photo>('photos',formData,{\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id:string) => requests.post(`/photos/${id}/setMain`,{}),\r\n    deletePhoto: (id:string)=> requests.delete(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`,profile),\r\n    updateFollowing: (username:string) => requests.post(`/follow/${username}`,{}),\r\n    getFollowings: (username:string,predicate:string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    getActivities: (username:string,predicate:string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity \r\n{\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername:string;\r\n    isCancelled:boolean;\r\n    isGoing:boolean;\r\n    isHost:boolean;\r\n    host?:Profile;\r\n    attendees:Profile[];\r\n}\r\n\r\nexport class Activity implements Activity\r\n{\r\n    constructor(init?:ActivityFormValues){\r\n        Object.assign(this,init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues{\r\n    id?:string = undefined;\r\n    title:string = '';\r\n    category:string = '';\r\n    description: string = '';\r\n    date: Date|null = null;\r\n    city:string='';\r\n    venue:string = '';\r\n\r\n    constructor(activity?:ActivityFormValues)\r\n    {\r\n        if(activity){\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\"\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\nexport default class ActivityStore\r\n{\r\n    activityRegistry = new Map<string,Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams= new PagingParams();\r\n    predicate = new Map().set('all',true);\r\n\r\n   \r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams:PagingParams) =>{\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value:string | Date)=>{\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value,key) => {\r\n                if(key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate){\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all',true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing',true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost',true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate',value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams(){\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber',this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize',this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value,key) => {\r\n            if(key === 'startDate'){\r\n                params.append(key,(value as Date).toISOString())\r\n            }\r\n            else\r\n            {\r\n                params.append(key,value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate(){\r\n        return Array.from(this.activityRegistry.values()).sort((a,b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities,activity) => {\r\n                const date = format( activity.date!,'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date],activity] : [activity];\r\n                return activities;\r\n            },{} as {[key:string]:Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () =>\r\n    {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n    \r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInital(false);            \r\n        } \r\n        catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInital(false);\r\n              \r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) =>{\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    private getActivity = (id:string) =>\r\n    {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity:Activity) =>{\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id,activity);\r\n    }\r\n\r\n    loadActivity = async (id:string) =>\r\n    {\r\n        let activity = this.getActivity(id);\r\n        if(activity)\r\n        {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else{\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() =>{\r\n                    this.selectedActivity = activity;\r\n                })\r\n                \r\n                this.setLoadingInital(false);\r\n                return activity;\r\n                \r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInital(false);\r\n            }\r\n        }\r\n    }\r\n \r\n    setLoadingInital = (state:boolean) =>{\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n\r\n    createActivity = async (activity:ActivityFormValues) =>{\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n                \r\n            })\r\n        } \r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    updateActivity =async (activity:ActivityFormValues) =>{\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id:string) =>{\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    updateAttendance = async() => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    \r\n                    this.selectedActivity.isGoing = false;\r\n                }\r\n\r\n                else\r\n                {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id,this.selectedActivity!);\r\n            })\r\n            \r\n        } \r\n        catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async() =>{\r\n        this.loading = true;\r\n\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id,this.selectedActivity!);\r\n            })\r\n        }\r\n        catch(error){\r\n            console.log(error)\r\n        }\r\n        finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username:string) =>{\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if(attendee.username === username)\r\n                {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore{\r\n    profile:Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings:Profile[] = [];\r\n    loadingFollowings= false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if(activeTab === 3 || activeTab === 4){\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                }\r\n                else\r\n                {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) =>{\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser(){\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username:string) =>{\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() =>{\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file:Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            runInAction(() => {\r\n                if(this.profile){\r\n                    this.profile.photos?.push(photo);\r\n                    if(photo.isMain && store.userStore.user){\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo:Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo:Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if(this.profile){\r\n                    this.profile.photos =this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && \r\n                    profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async(username:string,following:boolean) =>{\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if(this.profile && this.profile.username !== store.userStore?.user?.username\r\n                    && this.profile.username === username)\r\n                {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following; \r\n                }\r\n\r\n                if(this.profile && this.profile.username === store.userStore.user?.username)\r\n                {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                this.followings.forEach(profile => {\r\n                    if(profile.username === username)\r\n                    {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async(predicate:string) =>{\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.getFollowings(this.profile!.username,predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async(username:string,predicate?:string) =>{\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.getActivities(username,predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore{\r\n\r\n    user: User | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async(creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name:string) =>{\r\n        if(this.user) this.user.displayName = name;\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./ProfileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store\r\n{\r\n    activityStore:ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore:ModalStore;\r\n    profileStore:ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store:Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore()\r\n{\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token:string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt',token)\r\n                }\r\n                else{\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) =>{\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token:string | null) => \r\n    {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal\r\n{\r\n    open:boolean;\r\n    body:JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal: Modal = \r\n    {\r\n        open:false,\r\n        body:null\r\n    }\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => \r\n    {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => \r\n    {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\n\r\nexport default observer (function NavBar()\r\n{\r\n    const {userStore:{user,logout}} = useStore();\r\n    return(\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight:10}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item >\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profile/${user?.username}`} text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer( function ActivityFilters(){\r\n\r\n    const {activityStore:{predicate,setPredicate}} = useStore();\r\n    return(\r\n\r\n        <>\r\n            <Menu vertical size='large' style={{width:'100%',marginTop:25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters'/>\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all','true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing','true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost','true')}\r\n                />\r\n            </Menu>\r\n            <Header/>\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate',date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n                \r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Reveal, Button } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile:Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}:Props){\r\n\r\n    const {profileStore,userStore} = useStore();\r\n    const {updateFollowing,loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username:string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username,false): updateFollowing(username,true)\r\n    }\r\n\r\n    return(\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width:'100%'}}>\r\n                <Button  fluid color='teal' content={profile.following ? 'Following': 'Not following' }/>\r\n            </Reveal.Content>\r\n\r\n            <Reveal.Content hidden style={{width:'100%'}}>\r\n                <Button \r\n                    fluid basic \r\n                    color={profile.following ? 'red': 'green'} \r\n                    content={profile.following ? 'Unfollow': 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e,profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card,Icon,Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileCard({profile}:Props){\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Card as={Link} to={`/profile/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile?.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List,Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props{\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer( function ActivityListItemAttendee({attendees}:Props)\r\n{\r\n    const styles = {\r\n        borderColor:'orange',\r\n        borderWidth:3\r\n    }\r\n    return(\r\n\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n\r\n                <Popup \r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profile/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular \r\n                                src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following? styles: null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n                \r\n            ))}\r\n            \r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\n\r\n\r\ninterface Props {\r\n    activity:Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}:Props){\r\n\r\n    \r\n    return(\r\n       <Segment.Group>\r\n           <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n               <Item.Group>\r\n                   <Item>\r\n                       <Item.Image size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\r\n                       <Item.Content>\r\n                           <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                               {activity.title}\r\n                           </Item.Header>\r\n                           <Item.Description>Hosted by {activity.host?.displayName}</Item.Description>\r\n                           {activity.isHost && (\r\n                               <Item.Description>\r\n                                   <Label basic color='orange'>\r\n                                       You are hosting this activity\r\n                                   </Label>\r\n                               </Item.Description>\r\n                           )}\r\n\r\n                            {activity.isGoing && !activity.isHost && (\r\n                               <Item.Description>\r\n                                   <Label basic color='green'>\r\n                                       You are going to this activity\r\n                                   </Label>\r\n                               </Item.Description>\r\n                           )}\r\n                       </Item.Content>\r\n                   </Item>\r\n               </Item.Group>\r\n           </Segment>\r\n\r\n           <Segment>\r\n               <span>\r\n                   <Icon name='clock'/>{ format( activity.date!,'dd MMM yyyy h:mm aa')}\r\n                   <Icon name='marker'/>{activity.venue}\r\n               </span>\r\n           </Segment>\r\n           <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n           </Segment>\r\n\r\n           <Segment clearing>\r\n               <span>{activity.description}</span>\r\n               <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n               />\r\n           </Segment>\r\n       </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\nexport default observer (function ActivityList(){\r\n\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n\r\n    \r\n    return(\r\n        <>\r\n            {\r\n                groupedActivities.map(([group,activities]) => (\r\n                    <Fragment key={group}>\r\n                        <Header sub color='teal'>\r\n                            {group}\r\n                        </Header>\r\n\r\n                        {\r\n                            activities.map(activity => (\r\n                                <ActivityListItem key={activity.id} activity={activity}/>\r\n                            ))\r\n                        }\r\n\r\n                    </Fragment>\r\n                ))\r\n            }\r\n        </>\r\n    );\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer(function ActivityDashboard()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {loadActivities,activityRegistry,setPagingParams,pagination} = activityStore;\r\n    const [loadingNext,setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext(){\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then((() => setLoadingNext(false)));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1) \r\n            loadActivities();\r\n\r\n    }, [activityRegistry.size,loadActivities])\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name:string;\r\n    type?:string;\r\n    label?:string;\r\n}\r\n\r\nexport default function MyTextInput(props:Props){\r\n    const [field,meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n           <label>{props.label}</label>\r\n            <input {...field}{...props}/>\r\n\r\n            {meta.touched && meta.error?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm(){\r\n\r\n    const {userStore} = useStore();\r\n    return(\r\n\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Form, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm(){\r\n\r\n    const {userStore} = useStore();\r\n    return(\r\n\r\n        <Formik\r\n            initialValues={{\r\n                displayName:'',\r\n                username:'',\r\n                email:'',\r\n                password:'',\r\n                error:null\r\n            }}\r\n            onSubmit={(values,{setErrors}) => userStore.register(values).catch(error => setErrors({error}))}\r\n            \r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit,isSubmitting,errors,isValid,dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Register to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\r\n                    <MyTextInput name='username' placeholder='Username'/>\r\n                    <MyTextInput name='email' placeholder='Email'/>\r\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\r\n                    <ErrorMessage\r\n                        name='error' \r\n                        render={() => \r\n                            <ValidationErrors errors={errors.error}/>\r\n                        }\r\n                    />\r\n                    <Button \r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} \r\n                        positive \r\n                        content='Register' \r\n                        type='submit'\r\n                        fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage()\r\n{\r\n    const {userStore,modalStore} = useStore();\r\n    return(\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBotton:12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn \r\n                    ? \r\n                    (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities'/>\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to Activities\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                    :\r\n                    (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm/>)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                }\r\n                \r\n                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props\r\n{\r\n    inverted?: boolean;\r\n    content?:string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true,content='Loading...'}:Props)\r\n{\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name:string;\r\n    rows:number;\r\n    label?:string;\r\n}\r\n\r\nexport default function MyTextArea(props:Props){\r\n    const [field,meta] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n           <label>{props.label}</label>\r\n            <textarea {...field}{...props}/>\r\n\r\n            {meta.touched && meta.error?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    placeholder:string;\r\n    name:string;\r\n    options:any;\r\n    label?:string;\r\n}\r\n\r\nexport default function MySelectInput(props:Props){\r\n    const [field,meta, helpers] = useField(props.name);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n           <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e,d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder ={props.placeholder}\r\n            />\r\n\r\n            {meta.touched && meta.error?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text:'Drinks', value:'drinks'},\r\n    {text:'Culture', value:'culture'},\r\n    {text:'Film', value:'film'},\r\n    {text:'Food', value:'food'},\r\n    {text:'Music', value:'music'},\r\n    {text:'Travel', value:'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\r\n    const [field,meta,helpers] = useField(props.name!);\r\n\r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error?(\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ):null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'  \r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City'  name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment,Image, Item, Header, Button, Label } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\n\r\nconst activityImageStyle ={\r\n    filter:'brightness(30%)'\r\n}\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({activity}: Props){\r\n\r\n    const {activityStore:{updateAttendance,loading,cancelActivityToggle}}= useStore();\r\n\r\n    return(\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding:'0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                fluid style={activityImageStyle}/>\r\n\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header \r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color:'white'}}\r\n                                />\r\n                                <p>{format( activity.date!,'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>{activity.host?.displayName}</strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n\r\n             <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button \r\n                            as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ?  (\r\n                    <Button onClick={updateAttendance} loading={loading}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} color='teal' onClick={updateAttendance} loading={loading}>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )  \r\n})","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Grid, Icon, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer (function ActivityDetailedInfo({activity}:Props){\r\n    \r\n    \r\n    return(\r\n\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={5}>\r\n                        {activity.description}\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='calendar'/>\r\n                    </Grid.Column>\r\n\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format( activity.date!,'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, Item, Label, List, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\nexport default observer( function ActivityDetailedSidebar({activity:{attendees,host}}:Props)\r\n{\r\n\r\n    if(!attendees) return null;\r\n\r\n    return(\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{border:'none'}}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1? 'Person':'People'} going\r\n            </Segment>\r\n\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{position:'relative'}} key={attendee.username}>\r\n                            {\r\n                                attendee.username === host?.username &&\r\n                                    <Label\r\n                                        style={{position:'absolute'}}\r\n                                        color='orange'\r\n                                        ribbon='right'\r\n                                    >\r\n                                        Host\r\n                                    </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profile/${attendee.username}`}>\r\n                                        {attendee.displayName}\r\n                                    </Link>\r\n                                </Item.Header>\r\n                                {\r\n                                    attendee.following &&\r\n                                    <Item.Extra style={{color:'orange'}}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport {useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\n\r\nexport default observer(function ActivityDetails()\r\n{\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity,loadActivity,loadingInitial} = activityStore;\r\n    const {id} = useParams<{id:string}>();\r\n\r\n    useEffect(() =>{\r\n        if(id) loadActivity(id);\r\n    },[id,loadActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent/>;\r\n\r\n    return(\r\n       <Grid>\r\n           <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n           </Grid.Column>\r\n\r\n           <Grid.Column width={6}>\r\n               <ActivityDetailedSidebar activity={activity}/>\r\n           </Grid.Column>\r\n       </Grid>\r\n    )\r\n})","\r\nimport React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors,setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n\r\n            {\r\n                errors &&\r\n                <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops - we've looked everywhere and could not find this\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer (function ServerError(){\r\n    const {commonStore} = useStore();\r\n\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {\r\n                commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal'/>\r\n                    <code style={{marginTop:'10px'}}>\r\n                        {commonStore.error.details}\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer( function ModalContainer(){\r\n\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { format } from 'date-fns';\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = \r\n[\r\n    {menuItem: 'Future Events', pane:{key:'future'}},\r\n    {menuItem: 'Past Events', pane:{key:'past'}},\r\n    {menuItem: 'Hosting', pane:{key:'hosting'}}\r\n];\r\n\r\nexport default observer(function ProfileActivities(){\r\n\r\n    const {profileStore} = useStore();\r\n    const {loadUserActivities,loadingActivities,profile,userActivities} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n\r\n    const {profile,followings,loadingFollowings,activeTab} = profileStore;\r\n\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content=\r\n                        {\r\n                            activeTab === 3 \r\n                            ? \r\n                            `People following ${profile?.displayName}`\r\n                            :\r\n                            `People ${profile?.displayName} is following`\r\n                        }\r\n                    />\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            followings.map(profile => (\r\n                                <ProfileCard key={profile.username} profile={profile}/>\r\n                            ))\r\n                        }\r\n                    </Card.Group>\r\n                    \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props{\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}:Props) {\r\n\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor:'#eee',\r\n        borderRadius:'5px',\r\n        paddingTop:'30px',\r\n        textAlign:'center' as 'center',\r\n        heigth:200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor:'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file:any) => Object.assign(file,{\r\n            preview:URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop image here'/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props{\r\n    imagePreview:string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview,setCropper}:Props){\r\n    return(\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height:200,width:'100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n            \r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropZone\";\r\nimport { useEffect } from \"react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props{\r\n    loading:boolean;\r\n    uploadPhoto:(file:Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading,uploadPhoto}:Props){\r\n\r\n    const [files,setFiles] = useState<any>([]);\r\n\r\n    const [cropper,setCropper] = useState<Cropper>();\r\n\r\n    function onCrop(){\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file:any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    },[files])\r\n    return(\r\n\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header content='Step 1 - Add Photo' sub color='teal'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header content='Step 2 - Resize image' sub color='teal'/>\r\n                {files && files.length > 0 && (\r\n                   <PhotoWidgetCropper setCropper={setCropper} imagePreview = {files[0].preview}/>\r\n                )}\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header content='Step 3 - Preview & Upload' sub color='teal'/>\r\n                {\r\n                    files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{minHeight:200,overflow:'hidden'}}/> \r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close'/>\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfilePhotos({profile}:Props){\r\n    \r\n    const{profileStore:{isCurrentUser,uploadPhoto,uploading,loading,setMainPhoto,deletePhoto}} = useStore();\r\n    const [addPhotoMode,setAddPhotoMode] = useState(false);\r\n    const [target,setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file:Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo:Photo,e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo:Photo,e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n\r\n    return(\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' content='Photos'/>\r\n                    {\r\n                        isCurrentUser && \r\n                        (\r\n                            <Button floated='right' basic\r\n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {\r\n                        addPhotoMode \r\n                        ? \r\n                        (\r\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                        )\r\n                        :\r\n                        (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url}/>\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo,e)}\r\n                                                />\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    name={photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo,e)}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            \r\n                            </Card.Group>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n            \r\n            \r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}:Props)\r\n{\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About',render: () => <ProfileAbout/>},\r\n        {menuItem: 'Photos',render: () => <ProfilePhotos profile={profile}/>},\r\n        {menuItem: 'Events',render: () => <ProfileActivities/>},\r\n        {menuItem: 'Followers',render: () => <ProfileFollowings/>},\r\n        {menuItem: 'Following',render: () => <ProfileFollowings/>},\r\n    ]\r\n    return(\r\n        <Tab\r\n            menu={{fluid:true,vertical:true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e,data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {  Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\n\r\ninterface Props{\r\n    profile:Profile;\r\n}\r\n\r\nexport default observer( function ProfileHeader({profile}:Props)\r\n{\r\n    return(\r\n\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group width={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount}/>\r\n                        <Statistic label='Following' value={profile.followingCount}/>\r\n                    </Statistic.Group>\r\n                    <Divider/>\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\n\r\nexport default observer( function ProfilePage(){\r\n\r\n    const {username} = useParams<{username:string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile,loadProfile,profile,setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n\r\n        return () => {\r\n            setActiveTab(0);\r\n        } \r\n    },[loadProfile,username,setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...'/>\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {\r\n                    profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile}/>\r\n                        <ProfileContent profile = {profile}/>\r\n                    </>\r\n                    \r\n                }\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n        \r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoutes({component:Component,...rest}:Props){\r\n\r\n    const {userStore:{isLoggedIn}} = useStore();\r\n\r\n    return(\r\n        <Route\r\n            {...rest}\r\n            render = {(props) => isLoggedIn ? <Component {...props}/> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\n\nimport NavBar from './navbar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\n\n\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoutes from './PrivateRoutes';\n\nfunction App() \n{\n\n  const location = useLocation();\n  const {commonStore,userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token){\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }\n    else\n    {\n      commonStore.setAppLoaded();\n    }\n  },[commonStore,userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n  return (\n    <>\n    <ToastContainer position=\"bottom-right\" hideProgressBar/>\n    <ModalContainer/>\n      <Route exact path='/' component={HomePage}/>\n      <Route \n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar/>\n            <Container style={{marginTop:'7em'}}>\n              <Switch>\n                <PrivateRoutes exact path='/activities' component={ActivityDashboard}/>\n                <PrivateRoutes path='/activities/:id' component={ActivityDetails}/>\n                <PrivateRoutes key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm}/>\n                <PrivateRoutes path='/profile/:username' component={ProfilePage}/>\n                <PrivateRoutes path='/errors' component={TestErrors}/>\n                <Route path='/server-error' component={ServerError}/>\n                <Route component={NotFound}/>\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n      \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop(){\r\n\r\n    const {pathname} = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0,0);\r\n    },[pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/style.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop/>\n        <App />\n      </Router>\n    </StoreContext.Provider>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}